
crash_detection:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    rsp,0x8
    1008:	48 8b 05 d9 2f 00 00 	mov    rax,QWORD PTR [rip+0x2fd9]        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   rax,rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   rax
    1016:	48 83 c4 08          	add    rsp,0x8
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 62 2f 00 00    	push   QWORD PTR [rip+0x2f62]        # 3f88 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 63 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f63]        # 3f90 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nop    DWORD PTR [rax]
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <.plt>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <.plt>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <.plt>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <.plt>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <.plt>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <.plt>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <.plt>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	push   0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmp 1020 <.plt>
    10af:	90                   	nop

Disassembly of section .plt.got:

00000000000010b0 <__cxa_finalize@plt>:
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	f2 ff 25 3d 2f 00 00 	bnd jmp QWORD PTR [rip+0x2f3d]        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    10bb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000010c0 <raise@plt>:
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	f2 ff 25 cd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ecd]        # 3f98 <raise@GLIBC_2.2.5>
    10cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010d0 <strlen@plt>:
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	f2 ff 25 c5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ec5]        # 3fa0 <strlen@GLIBC_2.2.5>
    10db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010e0 <__stack_chk_fail@plt>:
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	f2 ff 25 bd 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ebd]        # 3fa8 <__stack_chk_fail@GLIBC_2.4>
    10eb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000000010f0 <mmap@plt>:
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	f2 ff 25 b5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2eb5]        # 3fb0 <mmap@GLIBC_2.2.5>
    10fb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001100 <printf@plt>:
    1100:	f3 0f 1e fa          	endbr64 
    1104:	f2 ff 25 ad 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ead]        # 3fb8 <printf@GLIBC_2.2.5>
    110b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001110 <tmpfile@plt>:
    1110:	f3 0f 1e fa          	endbr64 
    1114:	f2 ff 25 a5 2e 00 00 	bnd jmp QWORD PTR [rip+0x2ea5]        # 3fc0 <tmpfile@GLIBC_2.2.5>
    111b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001120 <fileno@plt>:
    1120:	f3 0f 1e fa          	endbr64 
    1124:	f2 ff 25 9d 2e 00 00 	bnd jmp QWORD PTR [rip+0x2e9d]        # 3fc8 <fileno@GLIBC_2.2.5>
    112b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001130 <sleep@plt>:
    1130:	f3 0f 1e fa          	endbr64 
    1134:	f2 ff 25 95 2e 00 00 	bnd jmp QWORD PTR [rip+0x2e95]        # 3fd0 <sleep@GLIBC_2.2.5>
    113b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000001140 <_start>:
    1140:	f3 0f 1e fa          	endbr64 
    1144:	31 ed                	xor    ebp,ebp
    1146:	49 89 d1             	mov    r9,rdx
    1149:	5e                   	pop    rsi
    114a:	48 89 e2             	mov    rdx,rsp
    114d:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
    1151:	50                   	push   rax
    1152:	54                   	push   rsp
    1153:	4c 8d 05 e6 04 00 00 	lea    r8,[rip+0x4e6]        # 1640 <__libc_csu_fini>
    115a:	48 8d 0d 6f 04 00 00 	lea    rcx,[rip+0x46f]        # 15d0 <__libc_csu_init>
    1161:	48 8d 3d b4 03 00 00 	lea    rdi,[rip+0x3b4]        # 151c <main>
    1168:	ff 15 72 2e 00 00    	call   QWORD PTR [rip+0x2e72]        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    116e:	f4                   	hlt    
    116f:	90                   	nop

0000000000001170 <deregister_tm_clones>:
    1170:	48 8d 3d 99 2e 00 00 	lea    rdi,[rip+0x2e99]        # 4010 <__TMC_END__>
    1177:	48 8d 05 92 2e 00 00 	lea    rax,[rip+0x2e92]        # 4010 <__TMC_END__>
    117e:	48 39 f8             	cmp    rax,rdi
    1181:	74 15                	je     1198 <deregister_tm_clones+0x28>
    1183:	48 8b 05 4e 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e4e]        # 3fd8 <_ITM_deregisterTMCloneTable>
    118a:	48 85 c0             	test   rax,rax
    118d:	74 09                	je     1198 <deregister_tm_clones+0x28>
    118f:	ff e0                	jmp    rax
    1191:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1198:	c3                   	ret    
    1199:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000011a0 <register_tm_clones>:
    11a0:	48 8d 3d 69 2e 00 00 	lea    rdi,[rip+0x2e69]        # 4010 <__TMC_END__>
    11a7:	48 8d 35 62 2e 00 00 	lea    rsi,[rip+0x2e62]        # 4010 <__TMC_END__>
    11ae:	48 29 fe             	sub    rsi,rdi
    11b1:	48 89 f0             	mov    rax,rsi
    11b4:	48 c1 ee 3f          	shr    rsi,0x3f
    11b8:	48 c1 f8 03          	sar    rax,0x3
    11bc:	48 01 c6             	add    rsi,rax
    11bf:	48 d1 fe             	sar    rsi,1
    11c2:	74 14                	je     11d8 <register_tm_clones+0x38>
    11c4:	48 8b 05 25 2e 00 00 	mov    rax,QWORD PTR [rip+0x2e25]        # 3ff0 <_ITM_registerTMCloneTable>
    11cb:	48 85 c0             	test   rax,rax
    11ce:	74 08                	je     11d8 <register_tm_clones+0x38>
    11d0:	ff e0                	jmp    rax
    11d2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
    11d8:	c3                   	ret    
    11d9:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

00000000000011e0 <__do_global_dtors_aux>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	80 3d 25 2e 00 00 00 	cmp    BYTE PTR [rip+0x2e25],0x0        # 4010 <__TMC_END__>
    11eb:	75 2b                	jne    1218 <__do_global_dtors_aux+0x38>
    11ed:	55                   	push   rbp
    11ee:	48 83 3d 02 2e 00 00 	cmp    QWORD PTR [rip+0x2e02],0x0        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    11f5:	00 
    11f6:	48 89 e5             	mov    rbp,rsp
    11f9:	74 0c                	je     1207 <__do_global_dtors_aux+0x27>
    11fb:	48 8b 3d 06 2e 00 00 	mov    rdi,QWORD PTR [rip+0x2e06]        # 4008 <__dso_handle>
    1202:	e8 a9 fe ff ff       	call   10b0 <__cxa_finalize@plt>
    1207:	e8 64 ff ff ff       	call   1170 <deregister_tm_clones>
    120c:	c6 05 fd 2d 00 00 01 	mov    BYTE PTR [rip+0x2dfd],0x1        # 4010 <__TMC_END__>
    1213:	5d                   	pop    rbp
    1214:	c3                   	ret    
    1215:	0f 1f 00             	nop    DWORD PTR [rax]
    1218:	c3                   	ret    
    1219:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]

0000000000001220 <frame_dummy>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	e9 77 ff ff ff       	jmp    11a0 <register_tm_clones>

0000000000001229 <is_uppercase>:

// Crashes
#include <sys/mman.h>
#include <signal.h>

int is_uppercase(char c) {
    1229:	f3 0f 1e fa          	endbr64 
    122d:	55                   	push   rbp
    122e:	48 89 e5             	mov    rbp,rsp
    1231:	89 f8                	mov    eax,edi
    1233:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    return c >= 'A' && c <= 'Z';
    1236:	80 7d fc 40          	cmp    BYTE PTR [rbp-0x4],0x40
    123a:	7e 0d                	jle    1249 <is_uppercase+0x20>
    123c:	80 7d fc 5a          	cmp    BYTE PTR [rbp-0x4],0x5a
    1240:	7f 07                	jg     1249 <is_uppercase+0x20>
    1242:	b8 01 00 00 00       	mov    eax,0x1
    1247:	eb 05                	jmp    124e <is_uppercase+0x25>
    1249:	b8 00 00 00 00       	mov    eax,0x0
}
    124e:	5d                   	pop    rbp
    124f:	c3                   	ret    

0000000000001250 <is_lowercase>:

int is_lowercase(char c) {
    1250:	f3 0f 1e fa          	endbr64 
    1254:	55                   	push   rbp
    1255:	48 89 e5             	mov    rbp,rsp
    1258:	89 f8                	mov    eax,edi
    125a:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    return c >= 'a' && c <= 'z';
    125d:	80 7d fc 60          	cmp    BYTE PTR [rbp-0x4],0x60
    1261:	7e 0d                	jle    1270 <is_lowercase+0x20>
    1263:	80 7d fc 7a          	cmp    BYTE PTR [rbp-0x4],0x7a
    1267:	7f 07                	jg     1270 <is_lowercase+0x20>
    1269:	b8 01 00 00 00       	mov    eax,0x1
    126e:	eb 05                	jmp    1275 <is_lowercase+0x25>
    1270:	b8 00 00 00 00       	mov    eax,0x0
}
    1275:	5d                   	pop    rbp
    1276:	c3                   	ret    

0000000000001277 <is_number>:

int is_number(char c) {
    1277:	f3 0f 1e fa          	endbr64 
    127b:	55                   	push   rbp
    127c:	48 89 e5             	mov    rbp,rsp
    127f:	89 f8                	mov    eax,edi
    1281:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    return c >= '0' && c <= '9';
    1284:	80 7d fc 2f          	cmp    BYTE PTR [rbp-0x4],0x2f
    1288:	7e 0d                	jle    1297 <is_number+0x20>
    128a:	80 7d fc 39          	cmp    BYTE PTR [rbp-0x4],0x39
    128e:	7f 07                	jg     1297 <is_number+0x20>
    1290:	b8 01 00 00 00       	mov    eax,0x1
    1295:	eb 05                	jmp    129c <is_number+0x25>
    1297:	b8 00 00 00 00       	mov    eax,0x0
}
    129c:	5d                   	pop    rbp
    129d:	c3                   	ret    

000000000000129e <is_operator>:

int is_operator(char c) {
    129e:	f3 0f 1e fa          	endbr64 
    12a2:	55                   	push   rbp
    12a3:	48 89 e5             	mov    rbp,rsp
    12a6:	89 f8                	mov    eax,edi
    12a8:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    return c == '=' || c == '<' || c == '>';
    12ab:	80 7d fc 3d          	cmp    BYTE PTR [rbp-0x4],0x3d
    12af:	74 0c                	je     12bd <is_operator+0x1f>
    12b1:	80 7d fc 3c          	cmp    BYTE PTR [rbp-0x4],0x3c
    12b5:	74 06                	je     12bd <is_operator+0x1f>
    12b7:	80 7d fc 3e          	cmp    BYTE PTR [rbp-0x4],0x3e
    12bb:	75 07                	jne    12c4 <is_operator+0x26>
    12bd:	b8 01 00 00 00       	mov    eax,0x1
    12c2:	eb 05                	jmp    12c9 <is_operator+0x2b>
    12c4:	b8 00 00 00 00       	mov    eax,0x0
}
    12c9:	5d                   	pop    rbp
    12ca:	c3                   	ret    

00000000000012cb <is_voyel>:

int is_voyel(char c) {
    12cb:	f3 0f 1e fa          	endbr64 
    12cf:	55                   	push   rbp
    12d0:	48 89 e5             	mov    rbp,rsp
    12d3:	89 f8                	mov    eax,edi
    12d5:	88 45 fc             	mov    BYTE PTR [rbp-0x4],al
    if ((char) c == 'A' || (char) c == 'E' || (char) c == 'I' || (char) c == 'O' || (char) c == 'U' || 
    12d8:	80 7d fc 41          	cmp    BYTE PTR [rbp-0x4],0x41
    12dc:	74 36                	je     1314 <is_voyel+0x49>
    12de:	80 7d fc 45          	cmp    BYTE PTR [rbp-0x4],0x45
    12e2:	74 30                	je     1314 <is_voyel+0x49>
    12e4:	80 7d fc 49          	cmp    BYTE PTR [rbp-0x4],0x49
    12e8:	74 2a                	je     1314 <is_voyel+0x49>
    12ea:	80 7d fc 4f          	cmp    BYTE PTR [rbp-0x4],0x4f
    12ee:	74 24                	je     1314 <is_voyel+0x49>
    12f0:	80 7d fc 55          	cmp    BYTE PTR [rbp-0x4],0x55
    12f4:	74 1e                	je     1314 <is_voyel+0x49>
    12f6:	80 7d fc 61          	cmp    BYTE PTR [rbp-0x4],0x61
    12fa:	74 18                	je     1314 <is_voyel+0x49>
        (char) c == 'a' || (char) c == 'e' || (char) c == 'i' || (char) c == 'o' || (char) c == 'u')
    12fc:	80 7d fc 65          	cmp    BYTE PTR [rbp-0x4],0x65
    1300:	74 12                	je     1314 <is_voyel+0x49>
    1302:	80 7d fc 69          	cmp    BYTE PTR [rbp-0x4],0x69
    1306:	74 0c                	je     1314 <is_voyel+0x49>
    1308:	80 7d fc 6f          	cmp    BYTE PTR [rbp-0x4],0x6f
    130c:	74 06                	je     1314 <is_voyel+0x49>
    130e:	80 7d fc 75          	cmp    BYTE PTR [rbp-0x4],0x75
    1312:	75 07                	jne    131b <is_voyel+0x50>
        return 1;
    1314:	b8 01 00 00 00       	mov    eax,0x1
    1319:	eb 05                	jmp    1320 <is_voyel+0x55>
    return 0;
    131b:	b8 00 00 00 00       	mov    eax,0x0
}
    1320:	5d                   	pop    rbp
    1321:	c3                   	ret    

0000000000001322 <RIVERTestOneInput>:

void RIVERTestOneInput(char *ptr) {
    1322:	f3 0f 1e fa          	endbr64 
    1326:	55                   	push   rbp
    1327:	48 89 e5             	mov    rbp,rsp
    132a:	48 83 ec 70          	sub    rsp,0x70
    132e:	48 89 7d 98          	mov    QWORD PTR [rbp-0x68],rdi
    1332:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1339:	00 00 
    133b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    133f:	31 c0                	xor    eax,eax

    int fst = (unsigned char)ptr[0];
    1341:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    1345:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1348:	0f b6 c0             	movzx  eax,al
    134b:	89 45 b0             	mov    DWORD PTR [rbp-0x50],eax
    int snd = (unsigned char)ptr[1];
    134e:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    1352:	48 83 c0 01          	add    rax,0x1
    1356:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1359:	0f b6 c0             	movzx  eax,al
    135c:	89 45 b4             	mov    DWORD PTR [rbp-0x4c],eax
    int thd = (unsigned char)ptr[2];
    135f:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    1363:	48 83 c0 02          	add    rax,0x2
    1367:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    136a:	0f b6 c0             	movzx  eax,al
    136d:	89 45 b8             	mov    DWORD PTR [rbp-0x48],eax
    int fth = (unsigned char)ptr[3];
    1370:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    1374:	48 83 c0 03          	add    rax,0x3
    1378:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    137b:	0f b6 c0             	movzx  eax,al
    137e:	89 45 bc             	mov    DWORD PTR [rbp-0x44],eax

    int x = -0xffff;
    1381:	c7 45 a4 01 00 ff ff 	mov    DWORD PTR [rbp-0x5c],0xffff0001
    if (is_uppercase(fst) || is_lowercase(fst)) {
    1388:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
    138b:	0f be c0             	movsx  eax,al
    138e:	89 c7                	mov    edi,eax
    1390:	e8 94 fe ff ff       	call   1229 <is_uppercase>
    1395:	85 c0                	test   eax,eax
    1397:	75 11                	jne    13aa <RIVERTestOneInput+0x88>
    1399:	8b 45 b0             	mov    eax,DWORD PTR [rbp-0x50]
    139c:	0f be c0             	movsx  eax,al
    139f:	89 c7                	mov    edi,eax
    13a1:	e8 aa fe ff ff       	call   1250 <is_lowercase>
    13a6:	85 c0                	test   eax,eax
    13a8:	74 28                	je     13d2 <RIVERTestOneInput+0xb0>
        if (is_operator(snd)) {
    13aa:	8b 45 b4             	mov    eax,DWORD PTR [rbp-0x4c]
    13ad:	0f be c0             	movsx  eax,al
    13b0:	89 c7                	mov    edi,eax
    13b2:	e8 e7 fe ff ff       	call   129e <is_operator>
    13b7:	85 c0                	test   eax,eax
    13b9:	74 17                	je     13d2 <RIVERTestOneInput+0xb0>
            if (is_number(thd)) 
    13bb:	8b 45 b8             	mov    eax,DWORD PTR [rbp-0x48]
    13be:	0f be c0             	movsx  eax,al
    13c1:	89 c7                	mov    edi,eax
    13c3:	e8 af fe ff ff       	call   1277 <is_number>
    13c8:	85 c0                	test   eax,eax
    13ca:	74 06                	je     13d2 <RIVERTestOneInput+0xb0>
            {
                x = fth;
    13cc:	8b 45 bc             	mov    eax,DWORD PTR [rbp-0x44]
    13cf:	89 45 a4             	mov    DWORD PTR [rbp-0x5c],eax
            }            
        }
    }

    // Not interested in the input
    if(x == -0xffff)
    13d2:	81 7d a4 01 00 ff ff 	cmp    DWORD PTR [rbp-0x5c],0xffff0001
    13d9:	0f 84 26 01 00 00    	je     1505 <RIVERTestOneInput+0x1e3>
        return;

    int error = 0;
    13df:	c7 45 a8 00 00 00 00 	mov    DWORD PTR [rbp-0x58],0x0

    // Segmentation fault
    if (x >= 0 && x <= 20) {
    13e6:	83 7d a4 00          	cmp    DWORD PTR [rbp-0x5c],0x0
    13ea:	78 2f                	js     141b <RIVERTestOneInput+0xf9>
    13ec:	83 7d a4 14          	cmp    DWORD PTR [rbp-0x5c],0x14
    13f0:	7f 29                	jg     141b <RIVERTestOneInput+0xf9>
        int a[10];
        for (int i = 0; i < 1000; ++i)
    13f2:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [rbp-0x54],0x0
    13f9:	eb 10                	jmp    140b <RIVERTestOneInput+0xe9>
            a[i] = i;
    13fb:	8b 45 ac             	mov    eax,DWORD PTR [rbp-0x54]
    13fe:	48 98                	cdqe   
    1400:	8b 55 ac             	mov    edx,DWORD PTR [rbp-0x54]
    1403:	89 54 85 d0          	mov    DWORD PTR [rbp+rax*4-0x30],edx
        for (int i = 0; i < 1000; ++i)
    1407:	83 45 ac 01          	add    DWORD PTR [rbp-0x54],0x1
    140b:	81 7d ac e7 03 00 00 	cmp    DWORD PTR [rbp-0x54],0x3e7
    1412:	7e e7                	jle    13fb <RIVERTestOneInput+0xd9>

       error = 1; 
    1414:	c7 45 a8 01 00 00 00 	mov    DWORD PTR [rbp-0x58],0x1
    }        

    // Bus error
    if (x >= 21 && x <= 40) {   
    141b:	83 7d a4 14          	cmp    DWORD PTR [rbp-0x5c],0x14
    141f:	7e 52                	jle    1473 <RIVERTestOneInput+0x151>
    1421:	83 7d a4 28          	cmp    DWORD PTR [rbp-0x5c],0x28
    1425:	7f 4c                	jg     1473 <RIVERTestOneInput+0x151>
        FILE *f = tmpfile();
    1427:	e8 e4 fc ff ff       	call   1110 <tmpfile@plt>
    142c:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
        int *m = mmap(0, 4, PROT_WRITE, MAP_PRIVATE, fileno(f), 0);
    1430:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
    1434:	48 89 c7             	mov    rdi,rax
    1437:	e8 e4 fc ff ff       	call   1120 <fileno@plt>
    143c:	41 b9 00 00 00 00    	mov    r9d,0x0
    1442:	41 89 c0             	mov    r8d,eax
    1445:	b9 02 00 00 00       	mov    ecx,0x2
    144a:	ba 02 00 00 00       	mov    edx,0x2
    144f:	be 04 00 00 00       	mov    esi,0x4
    1454:	bf 00 00 00 00       	mov    edi,0x0
    1459:	e8 92 fc ff ff       	call   10f0 <mmap@plt>
    145e:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
        *m = 0;
    1462:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
    1466:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0

        error = 2;
    146c:	c7 45 a8 02 00 00 00 	mov    DWORD PTR [rbp-0x58],0x2
    }

    if (x >= 41 && x <= 60) {
    1473:	83 7d a4 28          	cmp    DWORD PTR [rbp-0x5c],0x28
    1477:	7e 17                	jle    1490 <RIVERTestOneInput+0x16e>
    1479:	83 7d a4 3c          	cmp    DWORD PTR [rbp-0x5c],0x3c
    147d:	7f 11                	jg     1490 <RIVERTestOneInput+0x16e>
        raise(SIGTERM);
    147f:	bf 0f 00 00 00       	mov    edi,0xf
    1484:	e8 37 fc ff ff       	call   10c0 <raise@plt>

        error = 3;
    1489:	c7 45 a8 03 00 00 00 	mov    DWORD PTR [rbp-0x58],0x3
    }

    if (x >= 61 && x <= 80) {
    1490:	83 7d a4 3c          	cmp    DWORD PTR [rbp-0x5c],0x3c
    1494:	7e 17                	jle    14ad <RIVERTestOneInput+0x18b>
    1496:	83 7d a4 50          	cmp    DWORD PTR [rbp-0x5c],0x50
    149a:	7f 11                	jg     14ad <RIVERTestOneInput+0x18b>
        raise(SIGABRT);
    149c:	bf 06 00 00 00       	mov    edi,0x6
    14a1:	e8 1a fc ff ff       	call   10c0 <raise@plt>

        error = 4;
    14a6:	c7 45 a8 04 00 00 00 	mov    DWORD PTR [rbp-0x58],0x4
    }

    if (x >= 81 && x <= 120) {   
    14ad:	83 7d a4 50          	cmp    DWORD PTR [rbp-0x5c],0x50
    14b1:	7e 17                	jle    14ca <RIVERTestOneInput+0x1a8>
    14b3:	83 7d a4 78          	cmp    DWORD PTR [rbp-0x5c],0x78
    14b7:	7f 11                	jg     14ca <RIVERTestOneInput+0x1a8>
        raise(SIGFPE);
    14b9:	bf 08 00 00 00       	mov    edi,0x8
    14be:	e8 fd fb ff ff       	call   10c0 <raise@plt>

        error = 5;
    14c3:	c7 45 a8 05 00 00 00 	mov    DWORD PTR [rbp-0x58],0x5
    }

    if (x >= 121 && x <= 127) {
    14ca:	83 7d a4 78          	cmp    DWORD PTR [rbp-0x5c],0x78
    14ce:	7e 17                	jle    14e7 <RIVERTestOneInput+0x1c5>
    14d0:	83 7d a4 7f          	cmp    DWORD PTR [rbp-0x5c],0x7f
    14d4:	7f 11                	jg     14e7 <RIVERTestOneInput+0x1c5>
        sleep(5);
    14d6:	bf 05 00 00 00       	mov    edi,0x5
    14db:	e8 50 fc ff ff       	call   1130 <sleep@plt>
        // raise (SIGHUP);

        error = 6;
    14e0:	c7 45 a8 06 00 00 00 	mov    DWORD PTR [rbp-0x58],0x6
    }

    if (error != 0) {
    14e7:	83 7d a8 00          	cmp    DWORD PTR [rbp-0x58],0x0
    14eb:	74 19                	je     1506 <RIVERTestOneInput+0x1e4>
        printf("Error found: %d!", error);
    14ed:	8b 45 a8             	mov    eax,DWORD PTR [rbp-0x58]
    14f0:	89 c6                	mov    esi,eax
    14f2:	48 8d 3d 0f 0b 00 00 	lea    rdi,[rip+0xb0f]        # 2008 <_IO_stdin_used+0x8>
    14f9:	b8 00 00 00 00       	mov    eax,0x0
    14fe:	e8 fd fb ff ff       	call   1100 <printf@plt>
        return;
    1503:	eb 01                	jmp    1506 <RIVERTestOneInput+0x1e4>
        return;
    1505:	90                   	nop
    }
}
    1506:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    150a:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    1511:	00 00 
    1513:	74 05                	je     151a <RIVERTestOneInput+0x1f8>
    1515:	e8 c6 fb ff ff       	call   10e0 <__stack_chk_fail@plt>
    151a:	c9                   	leave  
    151b:	c3                   	ret    

000000000000151c <main>:

int main(int ac, char **av)
{
    151c:	f3 0f 1e fa          	endbr64 
    1520:	55                   	push   rbp
    1521:	48 89 e5             	mov    rbp,rsp
    1524:	48 83 ec 20          	sub    rsp,0x20
    1528:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
    152b:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    int ret;

    if (ac != 2)
    152f:	83 7d ec 02          	cmp    DWORD PTR [rbp-0x14],0x2
    1533:	74 18                	je     154d <main+0x31>
    {
        printf("First param must be the string password");
    1535:	48 8d 3d e4 0a 00 00 	lea    rdi,[rip+0xae4]        # 2020 <_IO_stdin_used+0x20>
    153c:	b8 00 00 00 00       	mov    eax,0x0
    1541:	e8 ba fb ff ff       	call   1100 <printf@plt>
        return -1;
    1546:	b8 ff ff ff ff       	mov    eax,0xffffffff
    154b:	eb 79                	jmp    15c6 <main+0xaa>
    }

    int fth = 0;
    154d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    if (strlen(av[1]) >= 4)
    1554:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1558:	48 83 c0 08          	add    rax,0x8
    155c:	48 8b 00             	mov    rax,QWORD PTR [rax]
    155f:	48 89 c7             	mov    rdi,rax
    1562:	e8 69 fb ff ff       	call   10d0 <strlen@plt>
    1567:	48 83 f8 03          	cmp    rax,0x3
    156b:	76 18                	jbe    1585 <main+0x69>
        fth = (unsigned char) av[1][3];
    156d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1571:	48 83 c0 08          	add    rax,0x8
    1575:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1578:	48 83 c0 03          	add    rax,0x3
    157c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    157f:	0f b6 c0             	movzx  eax,al
    1582:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

    printf("Executing: %s %s. Fourth char: %d\n", av[0], av[1], fth);
    1585:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1589:	48 83 c0 08          	add    rax,0x8
    158d:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    1590:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1594:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1597:	8b 4d fc             	mov    ecx,DWORD PTR [rbp-0x4]
    159a:	48 89 c6             	mov    rsi,rax
    159d:	48 8d 3d a4 0a 00 00 	lea    rdi,[rip+0xaa4]        # 2048 <_IO_stdin_used+0x48>
    15a4:	b8 00 00 00 00       	mov    eax,0x0
    15a9:	e8 52 fb ff ff       	call   1100 <printf@plt>
    RIVERTestOneInput(av[1]);
    15ae:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    15b2:	48 83 c0 08          	add    rax,0x8
    15b6:	48 8b 00             	mov    rax,QWORD PTR [rax]
    15b9:	48 89 c7             	mov    rdi,rax
    15bc:	e8 61 fd ff ff       	call   1322 <RIVERTestOneInput>
    15c1:	b8 00 00 00 00       	mov    eax,0x0
}
    15c6:	c9                   	leave  
    15c7:	c3                   	ret    
    15c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    15cf:	00 

00000000000015d0 <__libc_csu_init>:
    15d0:	f3 0f 1e fa          	endbr64 
    15d4:	41 57                	push   r15
    15d6:	4c 8d 3d a3 27 00 00 	lea    r15,[rip+0x27a3]        # 3d80 <__frame_dummy_init_array_entry>
    15dd:	41 56                	push   r14
    15df:	49 89 d6             	mov    r14,rdx
    15e2:	41 55                	push   r13
    15e4:	49 89 f5             	mov    r13,rsi
    15e7:	41 54                	push   r12
    15e9:	41 89 fc             	mov    r12d,edi
    15ec:	55                   	push   rbp
    15ed:	48 8d 2d 94 27 00 00 	lea    rbp,[rip+0x2794]        # 3d88 <__do_global_dtors_aux_fini_array_entry>
    15f4:	53                   	push   rbx
    15f5:	4c 29 fd             	sub    rbp,r15
    15f8:	48 83 ec 08          	sub    rsp,0x8
    15fc:	e8 ff f9 ff ff       	call   1000 <_init>
    1601:	48 c1 fd 03          	sar    rbp,0x3
    1605:	74 1f                	je     1626 <__libc_csu_init+0x56>
    1607:	31 db                	xor    ebx,ebx
    1609:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
    1610:	4c 89 f2             	mov    rdx,r14
    1613:	4c 89 ee             	mov    rsi,r13
    1616:	44 89 e7             	mov    edi,r12d
    1619:	41 ff 14 df          	call   QWORD PTR [r15+rbx*8]
    161d:	48 83 c3 01          	add    rbx,0x1
    1621:	48 39 dd             	cmp    rbp,rbx
    1624:	75 ea                	jne    1610 <__libc_csu_init+0x40>
    1626:	48 83 c4 08          	add    rsp,0x8
    162a:	5b                   	pop    rbx
    162b:	5d                   	pop    rbp
    162c:	41 5c                	pop    r12
    162e:	41 5d                	pop    r13
    1630:	41 5e                	pop    r14
    1632:	41 5f                	pop    r15
    1634:	c3                   	ret    
    1635:	66 66 2e 0f 1f 84 00 	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    163c:	00 00 00 00 

0000000000001640 <__libc_csu_fini>:
    1640:	f3 0f 1e fa          	endbr64 
    1644:	c3                   	ret    

Disassembly of section .fini:

0000000000001648 <_fini>:
    1648:	f3 0f 1e fa          	endbr64 
    164c:	48 83 ec 08          	sub    rsp,0x8
    1650:	48 83 c4 08          	add    rsp,0x8
    1654:	c3                   	ret    
